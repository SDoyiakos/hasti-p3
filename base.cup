/**********************************************************************
 Java CUP specification for a parser for base programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).lineNum,
                     ((TokenVal)currToken.value).charNum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INTEGER;
terminal                LOGICAL;
terminal                VOID;
terminal                TUPLE;
terminal TokenVal 	TRUE;
terminal TokenVal	FALSE;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                LSQBRACKET;
terminal                RSQBRACKET;
terminal                COLON;
terminal                COMMA;
terminal                DOT;
terminal                INPUTOP;
terminal                OUTPUTOP;
terminal                ASSIGN;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                AND;
terminal                OR;
terminal                NOT;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                GREATER;
terminal                GREATEREQ;
terminal                LESS;
terminal                LESSEQ;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                READ;
terminal                WRITE;
terminal                RETURN;
terminal 		UMINUS;

/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal TypeNode         type;
non terminal IdNode           id;
non terminal TupleDeclNode    tupleDecl;
non terminal LinkedList       tupleBody;
non terminal FctnDeclNode     fctnDecl;
non terminal FctnBodyNode     fctnBody;
non terminal CallExpNode      fctnCall;
non terminal LinkedList	      stmtList;
non terminal LinkedList	      varDeclList;
non terminal ExpNode	      term;
non terminal ExpNode	      exp;
non terminal AssignExpNode    assignExp;
non terminal ExpNode	      loc;
non terminal StmtNode	      stmt;
non terminal FormalDeclNode   formalDecl;
non terminal LinkedList       formalsList;
non terminal FormalsListNode  formals;

/* NOTE: Add precedence and associativity declarations here (precedence goes from lowest at top
   	 to highest at bottom) */

precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc GREATER, GREATEREQ, LESS, LESSEQ, EQUALS, NOTEQUALS;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence nonassoc NOT, UMINUS;

start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
		| tupleDecl:t
		{:
		RESULT = t;
		:}
		| fctnDecl:f
		{:
		RESULT = f;
		:}
                ;
		
varDeclList	::= varDeclList:l varDecl:v				       
		{:							       
		l.add(v);						       
		RESULT = l;						       
		:}							       
		| /* epsilon */						       
		{:							       
		LinkedList<VarDeclNode> list = new LinkedList<VarDeclNode>();  
		RESULT = list;						       
		:}
		;							       

varDecl         ::= type:t id:i DOT						   
                {:								   
		RESULT = new VarDeclNode(t, i, VarDeclNode.NON_TUPLE);		   
                :}								   
		| TUPLE id:i1 id:i2 DOT						   
		{:								   
		TupleNode tNode = new TupleNode(i1);				   
		RESULT = new VarDeclNode(tNode, i2, 1);				   
		:}								   
                ;								  	   

fctnDecl	::= type:t id:i formals:f fctnBody:b		  
		{:						  
		RESULT = new FctnDeclNode(t,i,f,b);		  
		:}						  
		;						  

tupleDecl       ::= TUPLE id:i LCURLY tupleBody:b RCURLY DOT          
                {:						      
		DeclListNode decl = new DeclListNode(b);	      
                RESULT = new TupleDeclNode(i, decl);      	      
                :}                                         	      
                ;

tupleBody	::= tupleBody:body varDecl:v				      
		{:							      
		body.add(v);						      
		RESULT = body;						      
		:}							      
		| varDecl:v						      
		{:							      
		LinkedList<VarDeclNode> nodes = new LinkedList<VarDeclNode>();
		nodes.add(v);						      
		RESULT = nodes;						      
		:}							      
		;
		
formals		::= LCURLY RCURLY						    
		{:								    
		RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());	    
		:}								    
		| LCURLY formalsList:l RCURLY					    
		{:								    
		RESULT = new FormalsListNode(l);				    
		:}								    
		;								    

formalsList	::= formalDecl:d
		{:
		LinkedList<FormalDeclNode> list = new LinkedList<FormalDeclNode>();
		list.add(d);
		RESULT = list;
		:}
		| formalDecl:d COMMA formalsList:l
		{:
		l.add(d);
		RESULT = l;
		:}
		;

formalDecl	::= type:t id:i		 
		{:			 
		RESULT = new FormalDeclNode(t,i); 
		:}			 
		;
		
fctnBody	::= LSQBRACKET varDeclList:v stmtList:s RSQBRACKET     
		{:						       
		DeclListNode vars = new DeclListNode(v);	       
		StmtListNode stmts = new StmtListNode(s);	       
		RESULT = new FctnBodyNode(vars, stmts);		       
		:}						       
		;
		
stmtList	::= stmtList:l stmt:s					 
		{:							 
		l.add(s);						 
		RESULT = l;						 
		:}							 
		|							 
		/* epsilon */						 
		{:							 
		LinkedList<StmtNode> list = new LinkedList<StmtNode>();	 
		RESULT = list;						 
		:}							 
		;							 

stmt		::= WHILE exp:e LSQBRACKET varDeclList:v stmtList:s RSQBRACKET
		{:
		RESULT = new WhileStmtNode(e,new DeclListNode(v),new StmtListNode(s));
		:}
		| READ INPUTOP loc:e DOT
		{:
		RESULT = new ReadStmtNode(e);
		:}
		| WRITE OUTPUTOP exp:e DOT
		{:
		RESULT = new WriteStmtNode(e);
		:}
		| RETURN exp:e DOT		       
		{:
		RESULT = new ReturnStmtNode(e);	       
		:}				       
		| RETURN DOT			       
		{:				       
		RESULT = new ReturnStmtNode(null);     
		:}				       
		;				       

exp		::= exp:e1 GREATER exp:e2
		{:
		RESULT = new GreaterNode(e1,e2);
		:}
		| exp:e1 GREATEREQ exp:e2
		{:
		RESULT = new GreaterEqNode(e1,e2);
		:}
		| exp:e1 LESS exp:e2
		{:
		RESULT = new LessNode(e1,e2);
		:}
		| exp:e1 LESSEQ exp:e2
		{:
		RESULT = new LessEqNode(e1,e2);
		:}
		| exp:e1 AND exp:e2
		{:
		RESULT = new AndNode(e1,e2);
		:}
		| exp:e1 OR exp:e2
		{:
		RESULT = new OrNode(e1,e2);
		:}
		| NOT exp:e
		{:
		RESULT = new NotNode(e);
		:}
		| MINUS term:t
		{:
		RESULT = new UnaryMinusNode(t);
		:} %prec UMINUS
		| term:t     
		{: RESULT = t; 
		:}	       
		;	       

term		::= loc:l						     
		{:							     
		RESULT = l;						     
		:}							     
		| TRUE:t						     
		{:							     
		RESULT = new TrueNode(t.lineNum,t.charNum);		     
		:}							     
		| FALSE:t						     
		{:							     
		RESULT = new FalseNode(t.lineNum,t.charNum);		     
		:}							     
		| INTLITERAL:t						     
		{:							     
		RESULT = new IntLitNode(t.lineNum,t.charNum,t.intVal);	     
		:}							     
		| STRLITERAL:t						     
		{:							     
		RESULT = new StringLitNode(t.lineNum,t.charNum,t.strVal);    
		:}							     
		| LPAREN exp:e RPAREN					     
		{:							     
		RESULT = e;						     
		:}							     
		| fctnCall:f						     
		{:							     
		RESULT = f;						     
		:}							     
		;							     

fctnCall	::= id:i LPAREN RPAREN		   
		{:				   
		RESULT = new CallExpNode(i,null);  
		:}				   
		;				   

type            ::= LOGICAL
                {: RESULT = new LogicalNode();
                :}
		|
		INTEGER
		{: RESULT = new IntegerNode();
		:}
		|
		VOID
		{: RESULT = new VoidNode();
		:}
                ;

loc		::= id:i			     
		{:				     
		RESULT = i;			     
		:}				     
		| loc:l COLON id:i		     
		{:				     
		RESULT = new TupleAccessExpNode(l,i);
		:}				     
		;				     

id              ::= ID:i
                {: RESULT = new IdNode(i.lineNum, i.charNum, i.idVal);
                :}
                ;	      
